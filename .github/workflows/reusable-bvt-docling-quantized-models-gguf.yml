# This workflow runs Build Verification Tests (BVT) on the quantized models
# using llama.cpp utilities.
name: bvt-docling-hf-quantized-models-gguf

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      hf_token:
        required: true
    inputs:
      enable_docling_jobs:
        type: boolean
        required: false
        default: false
      repo_id:
        type: string
        required: true
      quantization:
        type: string
        required: true
      target_repo_owner:
        type: string
        required: true
      target_repo_name_ext:
        type: string
        required: true
      debug:
        type: boolean
        required: true
        default: false
      trace:
        type: boolean
        required: false
        default: false

# See: https://github.com/ggerganov/llama.cpp/blob/master/examples/server/tests/unit/test_completion.py
env:
  DEBUG: ${{inputs.debug}}
  EXT_GGUF: .gguf
  EXT_NAME_F16: "-f16.gguf"
  LLAMA_CLI_RESPONSE_FILE: response.txt
  LLAMA_CLI_LOG_FILE: cli-log.txt
  LLAMA_CLI_STDOUT_FILE: output.txt
  LLAMA_CLI_STDERR_FILE: error.txt
  LLAMA_REQUEST_SEED: 647063347
  LLAMA_REQUEST_PROMPT: "What is the professional answer to \"Why is the sky blue?\""
  LLAMA_REQUEST_N_PREDICT: 128
  LLAMA_RUN_BIN: ./bin/llama-run # ./bin/llama-run
  LLAMA_RUN_FLAGS: "-v -n 9"
  LLAMA_RESPONSE_REGEX: "(Rayleigh|scatter)+"
  # LLAMA_RESPONSE_REGEX_2: "(Rayleigh|scatter)\s*(Rayleigh|scatter)" # allows spaces between
  LLAMA_SERVER_HOST: localhost
  LLAMA_SERVER_PORT: 8080
  LLAMACPP_DIR: llama.cpp
  MODEL_DOWNLOAD_DIR: models
  QUANTIZED_MODEL_EXISTS: false
  TEST_LLAMA_SERVER: false
  TEST_LLAMA_CLI: true
  TEST_LLAMA_RUN: false
  F16_MMPROJ_MODEL_BASE_FILENAME: mmproj-model
  LLAMA_REQUEST_TEST_IMAGE: "test/images/sample-text-screenshot.png"
  LLAMA_REQUEST_TEMP: 0
  LLAMA_REQUEST_CONTEXT_SIZE: 16384

jobs:
  build:
    runs-on: macos-latest
    if: ${{ inputs.enable_docling_jobs == true }}
    steps:
    - uses: actions/checkout@v4
    - name: confirm-environment
      run: |
        echo "[INFO] github.env:"
        echo "[INFO] >> run_id: '${{ github.run_id }}'"
        echo "[INFO] >> ref: '${{ github.ref }}', ref_name: '${{ github.ref_name }}', ref_type: '${{ github.ref_type }}'"
        echo "[INFO] >> workflow_ref: '${{ github.workflow_ref }}'"
        echo "[INFO] >> event_type: '${{ github.event_type }}'"
        echo "[INFO] >> event.: action: '${{ github.event.action }}'"
        echo "[INFO] >> event.: base_ref: '${{ github.event.base_ref }}'"
        echo "[INFO] >> event.: workflow_run.conclusion: '${{ github.event.workflow_run.conclusion }}'"
        echo "[INFO] >> event.release.: name: '${{ github.event.release.name }}', tag_name: '${{ github.event.release.tag_name }}'"

    # - name: Dump GitHub context
    #   env:
    #     GH_CONTEXT: ${{ toJson(github) }}
    #   run: echo "$GH_CONTEXT"

    - name: Dump GitHub inputs
      env:
        GITHUB_INPUTS: ${{ toJson(inputs) }}
      run: echo "$GITHUB_INPUTS"

    # Note: at the current time, we cannot use Python versions > 3.11 due to HF and langchain deps.
    # Note: you can verify in a step using: run: python -c "import sys; print(sys.version)"
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # primarily huggingface_hub
    - name: install-dependencies
      run: |
        python -m pip install -r ./requirements.txt
        pip list

    # Use this step to set values to the github context (shared across jobs/steps)
    # Note: using $GITHUB_OUTPUT sets values under the current step's namespace
    # whereas using $GITHUB_ENV sets values in the job's underlying environment.
    # Note: for each 'repo_id' we parse out e.g., REPO_ORG=ibm-granite REPO_NAME=granite-3.0-2b-instruct
    - name: set-github-env
      id: set_github_env
      run: |
        echo "REPO_ORG=$(dirname '${{ inputs.repo_id }}')" >> $GITHUB_ENV
        echo "REPO_NAME=$(basename '${{ inputs.repo_id }}')" >> $GITHUB_ENV

    - name: set-derivative-env-vars-1
      run: |
        echo "TARGET_REPO_ID=${{inputs.target_repo_owner}}/${{env.REPO_NAME}}${{inputs.target_repo_name_ext}}" >> $GITHUB_ENV
        echo "BASE_FNAME_QUANTIZED_GGUF=${{ env.REPO_NAME }}-${{inputs.quantization}}${{env.EXT_GGUF}}" >> $GITHUB_ENV
        echo "BASE_FNAME_MMPROJ_F16_GGUF=${{ env.F16_MMPROJ_MODEL_BASE_FILENAME }}${{env.EXT_NAME_F16}}" >> $GITHUB_ENV

    - name: set-derivative-env-vars-2
      run: |
        echo "LOCAL_MODEL_PATH=${{env.MODEL_DOWNLOAD_DIR}}/${{env.TARGET_REPO_ID}}" >> $GITHUB_ENV

    - name: set-derivative-env-vars-3
      run: |
        echo "LOCAL_FNAME_QUANTIZED_GGUF=${{env.LOCAL_MODEL_PATH}}/${{env.BASE_FNAME_QUANTIZED_GGUF}}" >> $GITHUB_ENV
        echo "LOCAL_FNAME_MMPROJ_F16_GGUF=${{env.LOCAL_MODEL_PATH}}/${{env.BASE_FNAME_MMPROJ_F16_GGUF}}" >> $GITHUB_ENV

    - name: verify-github-env
      run: |
        echo "================== Derivative Environment Variables 1 =================="
        echo "TARGET_REPO_ID='$TARGET_REPO_ID' (${{ env.TARGET_REPO_ID }})"
        echo "BASE_FNAME_QUANTIZED_GGUF='$BASE_FNAME_QUANTIZED_GGUF' (${{ env.BASE_FNAME_QUANTIZED_GGUF }})"
        echo "BASE_FNAME_MMPROJ_F16_GGUF='$BASE_FNAME_MMPROJ_F16_GGUF' (${{ env.BASE_FNAME_MMPROJ_F16_GGUF }})"
        echo "================== Derivative Environment Variables 2 =================="
        echo "LOCAL_MODEL_PATH='$LOCAL_MODEL_PATH' (${{ env.LOCAL_MODEL_PATH }})"
        echo "================== Derivative Environment Variables 3 =================="
        echo "LOCAL_FNAME_QUANTIZED_GGUF='$LOCAL_FNAME_QUANTIZED_GGUF' (${{ env.LOCAL_FNAME_QUANTIZED_GGUF }})"

    - name: test-quantized-model-exists
      run: |
        exists=$(python ./scripts/hf_model_file_exists.py ${{ env.TARGET_REPO_ID }} ${{ env.BASE_FNAME_QUANTIZED_GGUF }} ${{secrets.hf_token}})
        echo "exists: '$exists'"
        if [[ "$exists" == "False" ]]; then
          echo "FAILURE: model file: '${{env.TARGET_REPO_ID}}/${{env.BASE_FNAME_QUANTIZED_GGUF}}' does not exist."
          exit 2
        else
          echo "SUCCESS: model file: '${{env.TARGET_REPO_ID}}/${{env.BASE_FNAME_QUANTIZED_GGUF}}' exists."
          echo "setting environment variable: QUANTIZED_MODEL_EXISTS='true'..."
          echo "QUANTIZED_MODEL_EXISTS=true" >> $GITHUB_ENV
        fi

    - name: download-quantized-llm-gguf-hf-hub-download
      if: env.QUANTIZED_MODEL_EXISTS == 'true'
      run: |
        echo "Downloading model: ${{env.LOCAL_FNAME_QUANTIZED_GGUF}}..."
        python ./scripts/hf_file_download.py ${{ env.MODEL_DOWNLOAD_DIR}} ${{ env.TARGET_REPO_ID }} ${{ env.BASE_FNAME_QUANTIZED_GGUF }} ${{secrets.hf_token}}
        ls -al ${{env.MODEL_DOWNLOAD_DIR}}/${{ env.TARGET_REPO_ID }}/*.gguf

    - name: download-mmproj-gguf-hf-hub-download
      run: |
        echo "Downloading model: ${{env.BASE_FNAME_MMPROJ_F16_GGUF}}..."
        python ./scripts/hf_file_download.py ${{ env.MODEL_DOWNLOAD_DIR}} ${{ env.TARGET_REPO_ID }} ${{ env.BASE_FNAME_MMPROJ_F16_GGUF }} ${{secrets.hf_token}}
        ls -al ${{env.MODEL_DOWNLOAD_DIR}}/${{ env.TARGET_REPO_ID }}/*.gguf

    - name: verify-downloaded-files
      if: env.DEBUG == 'true' && runner.os == 'macOS'
      run: |
        find . -name \*.gguf -type f
        find . -name \*.jpg -type f

    # Run a sample
    # ./bin/llama-mtmd-cli -m ~/models/ibm-granite/granite-docling-258M/granite-docling-258M-F16.gguf \
    #    --image ~/Pictures/sample-doc.png \
    #    --mmproj ~/models/ibm-granite/mmproj-granite-docling-258M
    #    -p "<__media__>Convert this page to markdown."
    #    --verbose
    #.   -ngl 99

    # -p "${{env.LLAMA_REQUEST_PROMPT_SYSTEM}}${{env.LLAMA_REQUEST_PROMPT_USER}}" \
    # -c ${{env.LLAMA_REQUEST_CONTEXT_SIZE}} \
    - name: test-llama-mtmd-cli
      timeout-minutes: 10
      continue-on-error: false
      run: |
        echo "invoking llama-mtmd-cli to test inference..."
        echo "env.LOCAL_FNAME_MMPROJ_F16_GGUF=${{env.LOCAL_FNAME_MMPROJ_F16_GGUF}}"
        echo "env.LOCAL_FNAME_QUANTIZED_GGUF=${{env.LOCAL_FNAME_QUANTIZED_GGUF}}"
        ./bin/llama-mtmd-cli  -m ${{env.LOCAL_FNAME_QUANTIZED_GGUF}} \
            --mmproj ${{env.LOCAL_FNAME_MMPROJ_F16_GGUF}} \
            --image ${{env.LLAMA_REQUEST_TEST_IMAGE}} \
            -p "<__media__>Convert this page to markdown." \
            --verbose \
            -ngl 0 \
           --temp ${{env.LLAMA_REQUEST_TEMP}} 2> ${{env.LLAMA_CLI_STDERR_FILE}} 1> ${{env.LLAMA_CLI_STDOUT_FILE}}
        if [ $? -eq 1 ]; then
          echo "[ERROR] llama-mtmd-cli failed. Output (stderr):"
          ls -al
          cat ${{env.LLAMA_CLI_STDOUT_FILE}}
          cat ${{env.LLAMA_CLI_STDERR_FILE}}
          exit 1
        fi
        echo "[SUCCESS] llama-mtmd-cli succeeded. Output (stdout):"
        ls -al
        cat ${{env.LLAMA_CLI_STDOUT_FILE}}

    # - name: test-llama-cli-response-with-regex
    #   if: env.TEST_LLAMA_CLI == 'true'
    #   run: |
    #     matched=$(python ./scripts/test_regex_match_file.py "${{env.LLAMA_RESPONSE_REGEX}}" ${{env.LLAMA_CLI_STDOUT_FILE}})
    #     echo "matched: '$matched'"
    #     if [[ "$exists" == "False" ]]; then
    #       echo "[FAILURE] Regex `${{env.LLAMA_RESPONSE_REGEX}}` NOT matched in llama-mtmd-cli response."
    #       exit 1
    #     else
    #       echo "[SUCCESS] Regex `${{env.LLAMA_RESPONSE_REGEX}}` matched in llama-mtmd-cli response."
    #     fi
