# This workflow runs Build Verification Tests (BVT) on the quantized models 
# using llama.cpp utilities. 
name: bvt-hf-guardian-models-gguf

on:
  workflow_dispatch:   
  workflow_call:
    inputs:
      enable_llm_jobs:
        type: boolean
        required: false        
        default: false       
      repo_id:
        type: string
        required: true   
      quantization:
        type: string
        required: true       
      target_repo_owner:
        type: string        
        required: true
      target_repo_name_ext:
        type: string          
        required: true      
      debug:
        type: boolean
        required: true        
        default: false   
      trace:
        type: boolean
        required: false        
        default: false          

# See: https://github.com/ggerganov/llama.cpp/blob/master/examples/server/tests/unit/test_completion.py
env:
  DEBUG: ${{inputs.debug}}
  EXT_GGUF: .gguf
  LLAMA_CLI_RESPONSE_FILE: response.txt
  LLAMA_CLI_LOG_FILE: cli-log.txt
  LLAMA_REQUEST_SEED: 647063347
  LLAMA_REQUEST_PROMPT: "TBD"
  # LLAMA_RESPONSE_REGEX: "(sky|scatter)+"
  LLAMACPP_DIR: llama.cpp
  MODEL_DOWNLOAD_DIR: models
  QUANTIZED_MODEL_EXISTS: false

jobs:
  # if: ${{ inputs.enable_llm_jobs == true }}   
  test-quantized-model:
    runs-on: macos-latest 
    steps:
    - uses: actions/checkout@v4
    - name: confirm-environment
      run: |
        echo "[INFO] github.env:"   
        echo "[INFO] >> run_id: '${{ github.run_id }}'"       
        echo "[INFO] >> ref: '${{ github.ref }}', ref_name: '${{ github.ref_name }}', ref_type: '${{ github.ref_type }}'"
        echo "[INFO] >> workflow_ref: '${{ github.workflow_ref }}'"         
        echo "[INFO] >> event_type: '${{ github.event_type }}'" 
        echo "[INFO] >> event.: action: '${{ github.event.action }}'"
        echo "[INFO] >> event.: base_ref: '${{ github.event.base_ref }}'"          
        echo "[INFO] >> event.: workflow_run.conclusion: '${{ github.event.workflow_run.conclusion }}'"
        echo "[INFO] >> event.release.: name: '${{ github.event.release.name }}', tag_name: '${{ github.event.release.tag_name }}'"  

    - name: Dump GitHub inputs
      env:
        GITHUB_INPUTS: ${{ toJson(inputs) }}
      run: echo "$GITHUB_INPUTS"                              

    # Note: at the current time, we cannot use Python versions > 3.11 due to HF and langchain deps.
    # Note: you can verify in a step using: run: python -c "import sys; print(sys.version)"
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # primarily huggingface_hub
    - name: install-dependencies
      run: |
        python -m pip install -r ./requirements.txt
        pip list  

    # Use this step to set values to the github context (shared across jobs/steps)
    # Note: using $GITHUB_OUTPUT sets values under the current step's namespace
    # whereas using $GITHUB_ENV sets values in the job's underlying environment.
    # Note: for each 'repo_id' we parse out e.g., REPO_ORG=ibm-granite REPO_NAME=granite-3.0-2b-instruct
    - name: set-github-env
      id: set_github_env
      run: |       
        echo "REPO_ORG=$(dirname '${{ inputs.repo_id }}')" >> $GITHUB_ENV
        echo "REPO_NAME=$(basename '${{ inputs.repo_id }}')" >> $GITHUB_ENV
    
    - name: set-derivative-env-vars-1
      run: |   
        echo "TARGET_REPO_ID=${{inputs.target_repo_owner}}/${{env.REPO_NAME}}${{inputs.target_repo_name_ext}}" >> $GITHUB_ENV         
        echo "BASE_FNAME_QUANTIZED_GGUF=${{ env.REPO_NAME }}-${{inputs.quantization}}${{env.EXT_GGUF}}" >> $GITHUB_ENV        

    - name: set-derivative-env-vars-2
      run: | 
        echo "LOCAL_MODEL_PATH=${{env.MODEL_DOWNLOAD_DIR}}/${{ env.TARGET_REPO_ID }}" >> $GITHUB_ENV         
    
    - name: set-derivative-env-vars-3
      run: |         
        echo "LOCAL_FNAME_QUANTIZED_GGUF=${{env.LOCAL_MODEL_PATH}}/${{env.BASE_FNAME_QUANTIZED_GGUF}}" >> $GITHUB_ENV                 

    - name: verify-github-env
      run: |   
        echo "================== Derivative Environment Variables 1 =================="    
        echo "TARGET_REPO_ID='$TARGET_REPO_ID' (${{ env.TARGET_REPO_ID }})"                 
        echo "BASE_FNAME_QUANTIZED_GGUF='$BASE_FNAME_QUANTIZED_GGUF' (${{ env.BASE_FNAME_QUANTIZED_GGUF }})" 
        echo "================== Derivative Environment Variables 2 ==================" 
        echo "LOCAL_MODEL_PATH='$LOCAL_MODEL_PATH' (${{ env.LOCAL_MODEL_PATH }})"           
        echo "================== Derivative Environment Variables 3 =================="              
        echo "LOCAL_FNAME_QUANTIZED_GGUF='$LOCAL_FNAME_QUANTIZED_GGUF' (${{ env.LOCAL_FNAME_QUANTIZED_GGUF }})"      
  
    - name: test-quantized-model-exists
      run: |
        exists=$(python ./scripts/hf_model_file_exists.py ${{ env.TARGET_REPO_ID }} ${{ env.BASE_FNAME_QUANTIZED_GGUF }} ${{secrets.HF_TOKEN}})   
        echo "exists: '$exists'"
        if [[ "$exists" == "False" ]]; then
          echo "FAILURE: model file: '${{env.TARGET_REPO_ID}}/${{env.BASE_FNAME_QUANTIZED_GGUF}}' does not exist."
          exit 2
        else 
          echo "SUCCESS: model file: '${{env.TARGET_REPO_ID}}/${{env.BASE_FNAME_QUANTIZED_GGUF}}' exists."
          echo setting environment variable: QUANTIZED_MODEL_EXISTS='true'...
          echo "QUANTIZED_MODEL_EXISTS=true" >> $GITHUB_ENV
        fi        
         
    - name: download-quantized-gguf-hf-hub-download
      if: env.QUANTIZED_MODEL_EXISTS == 'true'
      run: |    
        echo "Downloading model to: ${{env.LOCAL_FNAME_QUANTIZED_GGUF}}..."      
        echo "--------------------"
        python ./scripts/hf_file_download.py ${{ env.MODEL_DOWNLOAD_DIR}} ${{ env.TARGET_REPO_ID }} ${{ env.BASE_FNAME_QUANTIZED_GGUF }} ${{secrets.HF_TOKEN}}
        ls -al ${{env.MODEL_DOWNLOAD_DIR}}/${{ env.TARGET_REPO_ID }}/*.gguf    

    - name: verify-downloaded-files
      if: env.DEBUG == 'true' && runner.os == 'macOS'  
      run: |
        echo GGUF file(s) downloaded...    
        echo "--------------------"                       
        find . -name \*.gguf -type f    
    
    - name: test-is-granite-guardian
      run: |
        if [ ${{ contains(env.LOCAL_FNAME_QUANTIZED_GGUF, 'guardian') }} ]; then
          echo "Environment variable 'LOCAL_FNAME_QUANTIZED_GGUF' contains 'guardian'."
          exit(0)
        else
          echo "Environment variable 'LOCAL_FNAME_QUANTIZED_GGUF' does NOT contain 'guardian'."
          exit(1)
        fi
        exit(2)
    
    - name: test-granite-guardian-risk-harm
      # if: env.TEST_LLAMA_CLI == 'true'  
      timeout-minutes: 10
      continue-on-error: true
      run: |  
        echo "invoking llama-cli to test inference (generation)..."
        echo "env.LOCAL_FNAME_QUANTIZED_GGUF=${{env.LOCAL_FNAME_QUANTIZED_GGUF}}"
        ./bin/llama-cli -no-cnv \
          -s ${{env.LLAMA_REQUEST_SEED}} \
          -m ./${{env.LOCAL_FNAME_QUANTIZED_GGUF}} \
          -p "${{env.LLAMA_REQUEST_PROMPT}}" \
        if [ $? -eq 1 ]; then
          exit 1
        fi  

    # - name: test-llama-cli-response-with-regex
    #   if: env.TEST_LLAMA_CLI == 'true'      
    #   run: |
    #     python ./scripts/test_regex_match_file.py "${{env.LLAMA_RESPONSE_REGEX}}" ${{env.LLAMA_CLI_RESPONSE_FILE}}
    #     echo "matched: '$matched'"
    #     if [[ "$exists" == "False" ]]; then
    #       echo "[FAILURE] Regex `${{env.LLAMA_RESPONSE_REGEX}}` NOT matched in llama-llava-cli response." 
    #       exit 1
    #     else
    #       echo "[SUCCESS] Regex `${{env.LLAMA_RESPONSE_REGEX}}` matched in llama-llava-cli response."
    #     fi
