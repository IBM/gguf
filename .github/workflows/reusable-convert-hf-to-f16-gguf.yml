# This workflow converts an original model from HF (in safetensors format) to an f16 GGUF format model.
# it then uploads the f16 model to Hugging Face Hub for the 'repo_id' (from the build matrix).

name: convert-hf-safetensors-to-f16-gguf

on:
  workflow_call:
    inputs:
      hf_collection_config:
        required: true
        type: string
      target_repo_owner:
        required: true
        type: string
      target_repo_name_ext:
        required: true
        type: string        
      debug:
        type: boolean
        required: true        
        default: false  
 
# permissions:
#  contents: write
#  packages: write

env:
  LLAMACPP_DIR: llama.cpp
  MODEL_DOWNLOAD_DIR: models
  EXT_GGUF: .gguf
  EXT_NAME_F16: "-f16.gguf"
  # TARGET_REPO_OWNER: mrutkows  # ibm-research
  # TARGET_REPO_NAME_EXT: -GGUF

# Full matrix:
# repo_id: [
#   "ibm-granite/granite-3.0-2b-instruct", 
#   "ibm-granite/granite-3.0-8b-instruct",
#   "ibm-granite/granite-3.0-3b-a800m-instruct",
#   "ibm-granite/granite-3.0-1b-a400m-instruct",
#   "ibm-granite/granite-guardian-3.0-2b",
#   "ibm-granite/granite-guardian-3.0-8b", 
# ]
jobs:  
  convert-f16:
    runs-on: macos-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}     
    # strategy:
    #   fail-fast: true
    #   matrix:
    #     repo_id: [
    #       "ibm-granite/granite-3.0-1b-a400m-instruct",                 
    #     ]
    steps:
    - uses: actions/checkout@v4

    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"           

    - name: confirm-environment
      run: |
        uname -a
        echo "runner.os: ${{ runner.os }}"
        echo "runner.arch: ${{ runner.arch }}"
        echo "github.workspace: ${{ github.workspace}}"
        echo "matrix.repo_id: ${{ matrix.repo_id }}"   
        echo "matrix.quantization: ${{ matrix.quantization }}"   
        echo "env.MODEL_DOWNLOAD_DIR: ${{env.MODEL_DOWNLOAD_DIR}}"        
        echo "env.EXT_NAME_F16: ${{ env.EXT_NAME_F16 }}"   
        echo "env.EXT_GGUF: ${{env.EXT_GGUF}}"           

    # alias tree="find . -print | sed -e 's;[^/]*/;|___;g;s;___|; |;g'"    
    # To allow `alias` in the default, non-interactive shell override using `shopt`.
    - name: create-aliases
      if: runner.os == 'macOS'
      run: |
        shopt -s expand_aliases
        alias tree="find"

    # Note: at the current time, we cannot use Python versions > 3.11 due to HF and langchain deps.
    # Note: you can verify in a step using: run: python -c "import sys; print(sys.version)"
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Use this step to set values to the github context (shared across jobs/steps)
    # Note: using $GITHUB_OUTPUT sets values under the current step's namespace
    # whereas using $GITHUB_ENV sets values in the job's underlying environment.
    # Note: for each 'repo_id' we parse out e.g., REPO_ORG=ibm-granite REPO_NAME=granite-3.0-2b-instruct
    - name: set-github-env
      id: set_github_env
      run: |
        echo "working_dir=$(pwd)" >> $GITHUB_OUTPUT      
        echo "working_dir=$(pwd)" >> $GITHUB_ENV        
        echo "REPO_ORG=$(dirname '${{ matrix.repo_id }}')" >> $GITHUB_ENV
        echo "REPO_NAME=$(basename '${{ matrix.repo_id }}')" >> $GITHUB_ENV

    - name: verify-github-env
      run: |     
        echo "================== GITHUB_OUTPUT =================="
        echo "steps.github_env.outputs.working_dir=${{ steps.set_github_env.outputs.working_dir }}"  
        echo "================== GITHUB_ENV ====================="           
        echo "working_dir=$working_dir"
        echo "REPO_ORG=$REPO_ORG"
        echo "REPO_NAME=$REPO_NAME"    

    # for GGUF conversion, we only need a shallow copy (depth=1) and
    # specify only the scripts and requirements files we need (sparse).
    # Note: we include LICENSE for future BOM generation
    - name: shallow-clone-llamacpp
      uses: actions/checkout@v4
      with:
        path: ${{ env.LLAMACPP_DIR }} # checkout under this directory
        repository: 'ggerganov/llama.cpp'
        ref: 'master'  # default to master branch
        fetch-depth: 1
        sparse-checkout-cone-mode: false
        sparse-checkout: |
          LICENSE
          convert_hf_to_gguf.py
          convert_lora_to_gguf.py
          requirements/requirements-convert_legacy_llama.txt
          requirements/requirements-convert_hf_to_gguf.txt
          requirements/requirements-convert_lora_to_gguf.txt
          gguf-py
          scripts

    - name: print-llamacpp
      run: |
        echo "PATH: '{{$PATH}}'"
        ls -al llama.cpp
        find llama.cpp ${{env.FIND_ARGS}}
 
    - name: install-dependencies
      run: |
        python -m pip install -r ./requirements.txt
        python -m pip install -r ./llama.cpp/requirements/requirements-convert_hf_to_gguf.txt
        python -m pip install -r ./llama.cpp/requirements/requirements-convert_lora_to_gguf.txt
        pip list      

    - name: download-model-snapshot
      run: |                         
        python ./scripts/hf_model_download_snapshot.py $MODEL_DOWNLOAD_DIR $REPO_ORG $REPO_NAME
        find models ${{env.FIND_ARGS}}

    - name: debug-dynamic-environment
      run: |
        echo "outputs.working_dir=${{ steps.github_env.outputs.working_dir }}"         
        echo "========"     
        echo "MODEL_DOWNLOAD_DIR (env)=$MODEL_DOWNLOAD_DIR (${{ env.MODEL_DOWNLOAD_DIR }})"    
        echo "REPO_ORG (env)=$REPO_ORG (${{ env.REPO_ORG }})"
        echo "REPO_NAME (env)=$REPO_NAME (${{ env.REPO_NAME }})"   

    - name: download-safetensors-convert-to-f16-gguf
      run: |
        python ./llama.cpp/convert_hf_to_gguf.py $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }} --outfile $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/${{ env.REPO_NAME }}${{env.EXT_NAME_F16}} --verbose
        ls -al $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/*.gguf        
        echo "TARGET_REPO_ID=${{inputs.target_repo_owner}}/${{env.REPO_NAME}}${{inputs.target_repo_name_ext}}" >> $GITHUB_ENV  
        echo "FNAME_F16_GGUF=$MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/${{ env.REPO_NAME }}${{env.EXT_NAME_F16}}" >> $GITHUB_ENV    
      
    - name: upload-f16-gguf-to-target-repo 
      run: |  
        echo "FNAME_F16_GGUF='$FNAME_F16_GGUF' (${{ env.FNAME_F16_GGUF}})"                
        echo "TARGET_REPO_ID='$TARGET_REPO_ID'(${{ env.TARGET_REPO_ID}})"       
        python ./scripts/hf_model_upload.py $TARGET_REPO_ID $FNAME_F16_GGUF ${{secrets.HF_TOKEN}} ${{github.workflow_ref}} ${{github.run_id}}       
