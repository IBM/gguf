# This workflow generates quantized GGUF models from the original model (safetensors) from HF.
# For a given instance (i.e., HF model id (repo) and quantization):
# - Checks out (clones) the current source code repository
# - Sets environment variables used in the workflow
# - Sets up a Python 3.11 environment
# - Shallow clones the llama.cpp project (master branch)
# - Installs llama.cpp python conversion script dependencies 
# - downloads the designated model from (public) HF; primarily this are the *.safetensor files
# - Conversion (normalization): converts HF model (safetensors) to GGUF format (normalized to f16)
# - Quantization: converts the f16 GGUF to the designated quantization (e.g., Q4_0, Q4_K_M, etc.)
# - IN-PROGRESS: publish the result to a release (TODO, support private repo. and secret token)
# - TODO: push to an IBM HF repo. (collection) specifically for GGUF formatted Granite models

name: Build and release GGUF models

on:
  release:
    types: [created]
  workflow_run:
    workflows: ["create-hf-repos-for-gguf"]
    branches: [main]
    types: 
      - completed    
  workflow_dispatch:
 
permissions:
 contents: write
 packages: write

env:
  LLAMACPP_DIR: llama.cpp
  MODEL_DOWNLOAD_DIR: models
  FIND_ARGS: "-not -path '*/.*' -print | sed -e 's;[^/]*/;|___;g;s;___|; |;g'"
  EXT_GGUF: .gguf
  EXT_NAME_F16: "-f16.gguf"

# Full matrix (Ollama):
# repo_id: [
#   "ibm-granite/granite-3.0-2b-instruct", 
#   "ibm-granite/granite-3.0-8b-instruct",
#   "ibm-granite/granite-3.0-3b-a800m-instruct",
#   "ibm-granite/granite-3.0-1b-a400m-instruct",
# ]
# quantization: [
#   "Q2_K", 
#   "Q3_K_L", "Q3_K_M", "Q3_K_S", 
#   "Q4_0", "Q4_1", "Q4_K_M", "Q4_K_S", 
#   "Q5_0", "Q5_1", "Q5_K_M", "Q5_K_S", 
#   "Q6_K", 
#   "Q8_0",
#]
jobs:
  build:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        repo_id: [
          "ibm-granite/granite-3.0-1b-a400m-instruct",
        ]
        quantization: [
          "Q4_K_M",
        ]

    steps:
    - uses: actions/checkout@v4

    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"           

    - name: confirm-environment
      run: |
        uname -a
        echo "runner.os: ${{ runner.os }}"
        echo "runner.arch: ${{ runner.arch }}"
        echo "github.workspace: ${{ github.workspace}}"
        echo "matrix.repo_id: ${{ matrix.repo_id }}"   
        echo "matrix.quantization: ${{ matrix.quantization }}"   
        echo "env.MODEL_DOWNLOAD_DIR: ${{env.MODEL_DOWNLOAD_DIR}}"        
        echo "env.EXT_NAME_F16: ${{ env.EXT_NAME_F16 }}"   
        echo "env.EXT_GGUF: ${{env.EXT_GGUF}}"    
      # echo "USER_ENV=${{ toJson(env) }}"       
      # echo "$USER_ENV"        

    # alias tree="find . -print | sed -e 's;[^/]*/;|___;g;s;___|; |;g'"    
    # To allow `alias` in the default, non-interactive shell override using `shopt`.
    - name: create-aliases
      if: runner.os == 'macOS'
      run: |
        shopt -s expand_aliases
        alias tree="find"

    # Note: at the current time, we cannot use Python versions > 3.11 due to HF and langchain deps.
    # Note: you can verify in a step using: run: python -c "import sys; print(sys.version)"
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Use this step to set values to the github context (shared across jobs/steps)
    # Note: using $GITHUB_OUTPUT sets values under the current step's namespace
    # whereas using $GITHUB_ENV sets values in the job's underlying environment.
    # Note: for each 'repo_id' we parse out e.g., REPO_ORG=ibm-granite REPO_NAME=granite-3.0-2b-instruct
    - name: set-github-env
      id: github_env
      run: |
        echo "working_dir=$(pwd)" >> $GITHUB_OUTPUT      
        echo "working_dir=$(pwd)" >> $GITHUB_ENV        
        echo "REPO_ORG=$(dirname '${{ matrix.repo_id }}')" >> $GITHUB_ENV
        echo "REPO_NAME=$(basename '${{ matrix.repo_id }}')" >> $GITHUB_ENV

    - name: verify-github-env
      run: |   
        echo "steps.github_env.outputs.working_dir=${{ steps.github_env.outputs.working_dir }}"      
        echo "working_dir=$working_dir"
        echo "REPO_ORG=$REPO_ORG"
        echo "REPO_NAME=$REPO_NAME"    

    # for GGUF conversion, we only need a shallow copy (depth=1) and
    # specify only the scripts and requirements files we need (sparse).
    # Note: we include LICENSE for future BOM generation
    - name: shallow-clone-llamacpp
      uses: actions/checkout@v4
      with:
        path: ${{ env.LLAMACPP_DIR }} # checkout under this directory
        repository: 'ggerganov/llama.cpp'
        ref: 'master'  # default to master branch
        fetch-depth: 1
        sparse-checkout-cone-mode: false
        sparse-checkout: |
          LICENSE
          convert_hf_to_gguf.py
          convert_lora_to_gguf.py
          requirements/requirements-convert_legacy_llama.txt
          requirements/requirements-convert_hf_to_gguf.txt
          requirements/requirements-convert_lora_to_gguf.txt
          gguf-py
          scripts

    - name: print-llamacpp
      run: |
        echo "PATH: '{{$PATH}}'"
        ls -al llama.cpp
        find llama.cpp ${{env.FIND_ARGS}}
 
    - name: install-dependencies
      run: |
        python -m pip install -r ./requirements.txt
        python -m pip install -r ./llama.cpp/requirements/requirements-convert_hf_to_gguf.txt
        python -m pip install -r ./llama.cpp/requirements/requirements-convert_lora_to_gguf.txt
        pip list      

    - name: download-model
      run: |                         
        python ./scripts/download_model_from_hf.py $MODEL_DOWNLOAD_DIR $REPO_ORG $REPO_NAME
        find models ${{env.FIND_ARGS}}

    - name: debug-dynamic-environment
      run: |
        echo "outputs.working_dir=${{ steps.github_env.outputs.working_dir }}"         
        echo "========"     
        echo "MODEL_DOWNLOAD_DIR (env)=$MODEL_DOWNLOAD_DIR (${{ env.MODEL_DOWNLOAD_DIR }})"    
        echo "REPO_ORG (env)=$REPO_ORG (${{ env.REPO_ORG }})"
        echo "REPO_NAME (env)=$REPO_NAME (${{ env.REPO_NAME }})"   

    - name: convert-hf-to-gguf
      run: |
        python ./llama.cpp/convert_hf_to_gguf.py $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }} --outfile $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/${{ env.REPO_NAME }}${{env.EXT_NAME_F16}} --verbose
        echo "FNAME_F16_GGUF=$MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/${{ env.REPO_NAME }}${{env.EXT_NAME_F16}}" >> $GITHUB_ENV
        ls -al $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/*.gguf

    - name: quantize-gguf
      run: |   
        echo "FNAME_F16_GGUF='$FNAME_F16_GGUF'"
        echo "env.FNAME_F16_GGUF: ${{ env.FNAME_F16_GGUF }}"         
        ./bin/llama-quantize $FNAME_F16_GGUF $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/${{ env.REPO_NAME }}-${{matrix.quantization}}${{env.EXT_GGUF}} ${{matrix.quantization}}
        echo "FNAME_QUANTIZED_GGUF=$MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/${{ env.REPO_NAME }}-${{matrix.quantization}}${{env.EXT_GGUF}}" >> $GITHUB_ENV 
        ls -al $MODEL_DOWNLOAD_DIR/${{ matrix.repo_id }}/*.gguf  
        echo "FNAME_QUANTIZED_GGUF=$FNAME_QUANTIZED_GGUF"          

    - name: quantize-gguf
      run: |  
        echo "FNAME_QUANTIZED_GGUF=$FNAME_QUANTIZED_GGUF" 
        python ./scripts/create_repo.py ${{ matrix.repo_id }}${{env.EXT_HF_REPO_NAME}} $FNAME_QUANTIZED_GGUF True ${{secrets.HF_TOKEN}}

    # - name: Release
    #   uses: softprops/action-gh-release@v2
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: |
    #       ${{env.FNAME_QUANTIZED_GGUF}}   
    #   
